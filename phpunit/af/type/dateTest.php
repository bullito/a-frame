<?php

namespace af\type;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-05 at 08:32:08.
 */
class dateTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var date
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new date;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers af\type\date::isValid
     * @todo   Implement testIsValid().
     */
    public function testIsValid()
    {
        $this->assertFalse($this->object->isValid('h123'));        
        $this->assertFalse($this->object->isValid('13213123'));
        $this->assertTrue($this->object->isValid(8763333));
        $this->assertFalse($this->object->isValid('-1'));
        $this->assertTrue($this->object->isValid(-1));
    }

    /**
     * @covers af\type\date::parse
     */
    public function testParse()
    {
        $datetimes  =   array(
            '2012-04-05 22:12:45',
            '01-02-2003 11:10',
            '01/02/2003 2:111',
            '+1 month'
        );
        foreach($datetimes as $datetime)
        {
            $this->setUp();
            $this->object->parse($datetime);
            $time = strtotime($datetime);
            $this->assertEquals($time, $this->object->value);
        }
        
        $this->setUp();
        $this->object->parse('01/02/2003 32:11');
        $this->assertNull($this->object->value);
    }

    /**
     * @covers af\type\date::format
     */
    public function testFormat()
    {
        $this->object->parse('2012-04-05 22:12:45');
        $this->assertEquals('2012-04-05', $this->object->format('Y-m-d'));
    }

    /**
     * @covers af\type\date::__get
     * @todo   Implement test__get().
     */
    public function test__get()
    {
        $this->object->parse('2012-03-01 22:34:17');
        $this->assertEquals('2012-03-01', $this->object->{'Y-m-d'}); 
        $this->assertEquals('date', $this->object->type);
        $this->assertEquals('2012', $this->object->Y);
    }

    /**
     * @covers af\type\date::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        $time = time();
        $this->object->set($time);
        $date = date('Y-m-d H:i:s');
        $this->assertEquals($date, $this->object.'');
    }

}
